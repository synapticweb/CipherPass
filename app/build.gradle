apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "net.synapticweb.cipherpass"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "net.synapticweb.cipherpass.util.CustomTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    dataBinding {
        enabled = true
        enabledForTests = true
    }

    //pentru idling resources
    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }
}

ext {
    acraVersion = "5.7.0"
    afollestadVersion = "3.3.0"
    appcompatVersion = "1.2.0"
    androidxcoreVersion = "1.3.2"
    androidXTestCoreVersion = '1.2.0'
    androidXTestRulesVersion = '1.2.0'
    archTestingVersion = '2.1.0'
    coroutinesVersion = "1.2.1"
    daggerVersion = "2.29.1"
    espressoVersion = "3.3.0"
    fragmentVersion = "1.3.0-beta01" //necesar pentru setFragmentResult și setFragmentResultListener (disponibile din 1.3.0-alpha04)
    junitVersion = "1.1.2"
    lifecycleVersion = "2.3.1"
    matomoVersion = "4.1.2"
    mockitoAndroidVersion = "3.3.3"
    materialVersion = "1.2.1"
    navigationVersion = "2.3.2"
    preferenceVersion = "1.1.1"
    recyclerViewVersion = '1.0.0'
    pslVersion = "90.0.9"
    roomVersion = "2.2.6"
    serializationVersion = "1.0.1"
    sqlcipherVersion = "4.4.2"
    sqliteVersion = "2.1.0"
    workVersion = "2.4.0"
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$androidxcoreVersion"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.preference:preference:$preferenceVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "com.afollestad.material-dialogs:core:$afollestadVersion"
    implementation "com.afollestad.material-dialogs:input:$afollestadVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion"
    implementation "ch.acra:acra-http:$acraVersion"
    implementation "org.matomo.sdk:tracker:$matomoVersion"

    //fragment:
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"

    //navigation:
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    //SqlCipher:
    implementation "net.zetetic:android-database-sqlcipher:$sqlcipherVersion"
    implementation "androidx.sqlite:sqlite:$sqliteVersion"

    //Room:
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    //Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$roomVersion"

    //dagger:
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    //pentru funcțiile extensie transformation livedata
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    //altele:
    implementation "org.mozilla.components:lib-publicsuffixlist:$pslVersion"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"

    //Testing:
    testImplementation 'junit:junit:4.12'
    androidTestImplementation "androidx.test.ext:junit:$junitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    //pentru FragmentActivity - de verificat
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
    //pentru runBlockingTest și maincoroutinerule
//    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    //pentru instanttaskexecutorrule:
    androidTestImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoAndroidVersion"

    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion"
}